
#include "dispids.h"

import "servprov.idl";
import "ocidl.idl";

//cpp_quote("#ifdef __midl")
typedef DWORD VSITEMID;
typedef LONG VSHPROPID;
//cpp_quote("#endif")

[uuid(C045D7BF-B8F2-4F6E-8E4A-0D4DF3322AC7)]
library ATLProject1Lib
{
	importlib("stdole2.tlb");

	[uuid(15412FDD-6A57-420C-933E-0A89A1DF497D)]
	enum OutputFileType { Binary, Sna };

	[object, uuid(A6F7B8F9-7FD3-4819-963A-5238B32F4123), dual, nonextensible, pointer_default(unique)]
	interface IZ80ProjectConfig : IDispatch
	{
		[id(dispid__name), propget] HRESULT __id ([out, retval] BSTR* value);

		[id(dispidGeneralProperties), propget] HRESULT GeneralProperties ([out, retval] IDispatch** ppDispatch);
		[id(dispidGeneralProperties), propput] HRESULT GeneralProperties (IDispatch* pDispatch);

		[id(dispidDebuggingProperties), propget] HRESULT DebuggingProperties ([out, retval] IDispatch** ppDispatch);
		[id(dispidDebuggingProperties), propput] HRESULT DebuggingProperties (IDispatch* pDispatch);

		[propget] HRESULT ConfigName ([out, retval] BSTR* pbstr);
		[propput] HRESULT ConfigName (BSTR pbstr);

		[propget] HRESULT PlatformName ([out, retval] BSTR* pbstr);
		[propput] HRESULT PlatformName (BSTR pbstr);

		HRESULT GetOutputDirectory ([out, retval] BSTR* pbstr);
		HRESULT GetOutputFileName ([out, retval] BSTR* pbstr);
		HRESULT GetSldFileName ([out, retval] BSTR* pbstr);
	};

	[object, uuid(6109C4FD-C067-4120-9853-6A2D6682BCB0), dual, nonextensible, pointer_default(unique)]
	interface IZ80ProjectConfigGeneralProperties : IDispatch
	{
		[id(dispid__name), propget] HRESULT __id ([out, retval] BSTR* value);

		[id(dispidOutputFileType), bindable, propget] HRESULT OutputFileType ([out, retval] enum OutputFileType* value);
		[id(dispidOutputFileType), bindable, propput] HRESULT OutputFileType (enum OutputFileType value);

		[id(dispidSaveListing), bindable, propget] HRESULT SaveListing ([out, retval] VARIANT_BOOL* save);
		[id(dispidSaveListing), bindable, propput] HRESULT SaveListing (VARIANT_BOOL save);

		// It's called SaveListingFilename (as opposed to ListingFilename) so it appears in the property grid right after SaveListing.
		[id(dispidListingFilename), bindable, propget] HRESULT SaveListingFilename ([out, retval] BSTR* pFilename);
		[id(dispidListingFilename), bindable, propput] HRESULT SaveListingFilename (BSTR filename);
	};

	[uuid(A6C45AD3-6F11-4116-A65D-9083381843D8)]
	enum LaunchType { PrintUsr, RandomizeUsr, ResetAndJump };

	[object, uuid(D529C72D-D7B3-40EF-9FF9-31595F4518D2), dual, nonextensible, pointer_default(unique)]
	interface IZ80ProjectConfigDebugProperties : IDispatch
	{
		[id(dispid__name), propget]
		HRESULT __id ([out, retval] BSTR* value);

		[id(dispidLoadAddress), bindable, propget, helpstring("This setting is currently not implemented; the load address is always 32768. It will be implemented in a future release.")]
		HRESULT LoadAddress ([out, retval] unsigned long* value);
		[id(dispidLoadAddress), bindable, propput]
		HRESULT LoadAddress (unsigned long value);

		[id(dispidEntryPointAddress), bindable, propget, helpstring("This setting is currently not implemented; the entry point address is always 32768. It will be implemented in a future release.")]
		HRESULT EntryPointAddress ([out, retval] unsigned short* value);
		[id(dispidEntryPointAddress), bindable, propput]
		HRESULT EntryPointAddress (unsigned short value);

		// "Selects the launch method: PRINT USR from Basic, RANDOMIZE USR from Basic, or jump right after reset."
		[id(dispidLaunchType), bindable, propget, helpstring("This setting is currently not implemented; the launch type is always PRINT USR. It will be implemented in a future release.")]
		HRESULT LaunchType ([out, retval] enum LaunchType* value);
		[id(dispidLaunchType), bindable, propput]
		HRESULT LaunchType (enum LaunchType value);
	};

	[object, uuid(A2EE7852-34B1-49A9-A3DB-36232AC6680C), dual, nonextensible, pointer_default(unique)]
	interface IZ80ProjectItem : IDispatch
	{
		VSITEMID GetItemId();
		HRESULT GetMkDocument (BSTR* pbstrMkDocument); // returns the full path
		IZ80ProjectItem* Next(); // TODO: keep an unordered_map with itemid/itemptr, then get rid of Next, SetNext, FindDescendant
		void SetNext (IZ80ProjectItem* next);
		HRESULT GetProperty (VSHPROPID propid, VARIANT* pvar);
		HRESULT SetProperty (VSHPROPID propid, REFVARIANT var);
		HRESULT GetGuidProperty (VSHPROPID propid, GUID* pguid);
		HRESULT SetGuidProperty (VSHPROPID propid, REFGUID rguid);
		HRESULT GetCanonicalName (BSTR* pbstrName); // returns the path relative to project if possible, otherwise the full path -- all lowercase
		HRESULT IsItemDirty (IUnknown *punkDocData, BOOL *pfDirty);
	}

	[object, uuid(D930CCA1-E515-4569-8DC6-959CD6367654), nonextensible, pointer_default(unique)]
	interface IZ80ProjectItemParent : IUnknown
	{
		IZ80ProjectItem* FirstChild();
		void SetFirstChild (IZ80ProjectItem* next);
	}

	// IID Same as the pkgdef entry [$RootKey$\Projects\{D438161C-F032-4014-BC5C-20A80EAFF59B}]
	[object, uuid(D438161C-F032-4014-BC5C-20A80EAFF59B), dual, nonextensible, pointer_default(unique)]
	interface IZ80ProjectProperties : IDispatch
	{
		[id(dispid__name), propget] HRESULT __id ([out, retval] BSTR* value);

		[id(dispidConfigurations), propget] HRESULT Configurations ([out, ref, retval] SAFEARRAY(IDispatch*)* configs);
		[id(dispidConfigurations), propput] HRESULT Configurations (SAFEARRAY(IDispatch*) configs);

		[id(dispidItems), propget] HRESULT Items ([out, ref, retval] SAFEARRAY(IZ80ProjectItem*)* items);
		[id(dispidItems), propput] HRESULT Items (SAFEARRAY(IZ80ProjectItem*) items);

		[id(dispidProjectGuid), propget] HRESULT Guid ([out, retval] BSTR* value);
		[id(dispidProjectGuid), propput] HRESULT Guid (BSTR value);
	}

	[object, uuid(680DBE9B-ABED-41BE-8A26-30446EEC47FB), dual, nonextensible, pointer_default(unique)]
	interface IZ80SourceFile : IZ80ProjectItem
	{
		[propget] HRESULT Path ([out, retval] BSTR* value);
		[propput] HRESULT Path (BSTR value); // possible to use LPWSTR here? (VT_LPWSTR in VARIANT)
	};

	[object, uuid(9E7C4743-BF65-4436-BB48-E0B52FF8D6C1), dual, nonextensible, pointer_default(unique)]
	interface IZ80AsmFile : IZ80SourceFile
	{
	};

	[object, uuid(588F7F04-8B74-404D-A80B-F7CCE9FA3E27), dual, nonextensible, pointer_default(unique)]
	interface IFelixLaunchOptions : IDispatch
	{
		[id(dispidProjectDir), propget] HRESULT ProjectDir ([out, retval] BSTR* pbstr);
		[id(dispidProjectDir), propput] HRESULT ProjectDir (BSTR pbstr);

		[id(dispidDebuggingProperties), propget] HRESULT DebuggingProperties ([out, retval] IDispatch** ppDispatch);
		[id(dispidDebuggingProperties), propput] HRESULT DebuggingProperties (IDispatch* pDispatch);
	}
};

// guids.h: definitions of GUIDs/IIDs/CLSIDs used in this VsPackage

/*
Do not use #pragma once, as this file needs to be included twice.  Once to declare the externs
for the GUIDs, and again right after including initguid.h to actually define the GUIDs.
*/

#define guidFelixPersistenceSlot { 0x6F52DA3A, 0xE13C, 0x4A1E, { 0xA1, 0x78, 0x98, 0x80, 0x5F, 0x35, 0x6A, 0x66 } }
#ifdef DEFINE_GUID
	DEFINE_GUID(CLSID_FelixPersistenceSlot, 0x6F52DA3A, 0xE13C, 0x4A1E, 0xA1, 0x78, 0x98, 0x80, 0x5F, 0x35, 0x6A, 0x66 );
#endif


// package guid
// { 768bc57b-42a8-42ab-b389-457946c4fc6a }
#define guidFelixPackagePkg { 0x768BC57B, 0x42A8, 0x42AB, { 0xB3, 0x89, 0x45, 0x79, 0x46, 0xC4, 0xFC, 0x6A } }
#ifdef DEFINE_GUID
	DEFINE_GUID(CLSID_FelixPackage, 0x768BC57B, 0x42A8, 0x42AB, 0xB3, 0x89, 0x45, 0x79, 0x46, 0xC4, 0xFC, 0x6A );
#endif

// Command set guid for our commands (used with IOleCommandTarget)
// { b44d0b2e-b799-48fd-8263-b1bced867b4a }
#define guidFelixPackageCmdSet { 0xB44D0B2E, 0xB799, 0x48FD, { 0x82, 0x63, 0xB1, 0xBC, 0xED, 0x86, 0x7B, 0x4A } }
#ifdef DEFINE_GUID
	DEFINE_GUID(CLSID_FelixPackageCmdSet, 0xB44D0B2E, 0xB799, 0x48FD, 0x82, 0x63, 0xB1, 0xBC, 0xED, 0x86, 0x7B, 0x4A );
#endif

//Guid for the image list referenced in the VSCT file
// { 79c68924-61f0-4fc7-8492-1e3a1620a180 }
#define guidImages { 0x79C68924, 0x61F0, 0x4FC7, { 0x84, 0x92, 0x1E, 0x3A, 0x16, 0x20, 0xA1, 0x80 } }
#ifdef DEFINE_GUID
	DEFINE_GUID(CLSID_Images, 0x79C68924, 0x61F0, 0x4FC7, 0x84, 0x92, 0x1E, 0x3A, 0x16, 0x20, 0xA1, 0x80 );
#endif

// {F9125C48-C421-4257-ACA8-23E52F5F9B46}
#ifdef DEFINE_GUID
	DEFINE_GUID(GeneralPropertyPage_CLSID, 0xf9125c48, 0xc421, 0x4257, 0xac, 0xa8, 0x23, 0xe5, 0x2f, 0x5f, 0x9b, 0x46);
#endif

// {0D7FDCBD-7936-495D-9EE1-1F7423367705}
#ifdef DEFINE_GUID
	DEFINE_GUID(AssemblerPropertyPage_CLSID, 0x0D7FDCBD, 0x7936, 0x495D, 0x9E, 0xE1, 0x1F, 0x74, 0x23, 0x36, 0x77, 0x05 );
#endif

// {8A5DDADC-8F55-4BD9-80A7-BB5510E078DA}
#ifdef DEFINE_GUID
	DEFINE_GUID(DebugPropertyPage_CLSID, 0x8a5ddadc, 0x8f55, 0x4bd9, 0x80, 0xa7, 0xbb, 0x55, 0x10, 0xe0, 0x78, 0xda );
#endif

// {545DCAA3-9611-4643-B105-F154FA59B45B}
DEFINE_GUID(PreBuildPropertyPage_CLSID, 0x545dcaa3, 0x9611, 0x4643, 0xb1, 0x5, 0xf1, 0x54, 0xfa, 0x59, 0xb4, 0x5b);

// {37D6F145-FDBC-4642-971D-FE72A392657E}
DEFINE_GUID(PostBuildPropertyPage_CLSID, 0x37d6f145, 0xfdbc, 0x4642, 0x97, 0x1d, 0xfe, 0x72, 0xa3, 0x92, 0x65, 0x7e);

// {598BC226-2E96-43AD-AD42-67D9CC6F75F6}
#ifdef DEFINE_GUID
	DEFINE_GUID(Z80AsmLanguageGuid, 0x598bc226, 0x2e96, 0x43ad, 0xad, 0x42, 0x67, 0xd9, 0xcc, 0x6f, 0x75, 0xf6);
#endif

// {190A3900-3E1B-44F7-BA2A-1A3F3FAEA1CA}
#ifdef DEFINE_GUID
	DEFINE_GUID(Engine_Id, 0x190A3900, 0x3E1B, 0x44F7, 0xBA, 0x2A, 0x1A, 0x3F, 0x3F, 0xAE, 0xA1, 0xCA);
#endif

// {0C9A3710-B822-45A1-859B-C5A8B33CF34B}
#ifdef DEFINE_GUID
	DEFINE_GUID(Engine_CLSID, 0x0C9A3710, 0xB822, 0x45A1, 0x85, 0x9B, 0xC5, 0xA8, 0xB3, 0x3C, 0xF3, 0x4B);
#endif

// {AFD42502-0F35-43DA-98A3-7CA143B51E62}
#ifdef DEFINE_GUID
	DEFINE_GUID(PortSupplier_Id, 0xAFD42502, 0x0F35, 0x43DA, 0x98, 0xA3, 0x7C, 0xA1, 0x43, 0xB5, 0x1E, 0x62);
#endif

// {A51C1431-B378-4C13-B32B-8513D35CA4A4}
#ifdef DEFINE_GUID
	DEFINE_GUID(PortSupplier_CLSID, 0xa51c1431, 0xb378, 0x4c13, 0xb3, 0x2b, 0x85, 0x13, 0xd3, 0x5c, 0xa4, 0xa4);
#endif

// {98D55925-7FDB-455D-94A4-A33B92401507}
#ifdef DEFINE_GUID
	DEFINE_GUID(SingleDebugPortId, 0x98d55925, 0x7fdb, 0x455d, 0x94, 0xa4, 0xa3, 0x3b, 0x92, 0x40, 0x15, 0x7);
#endif

// {97044F39-FD2F-4DD6-8A8D-5C9D4D3FB98E}
DEFINE_GUID(GUID_CommandLineBuilder, 0x97044f39, 0xfd2f, 0x4dd6, 0x8a, 0x8d, 0x5c, 0x9d, 0x4d, 0x3f, 0xb9, 0x8e);
extern const wchar_t GUID_CommandLineBuilderStr[39];
